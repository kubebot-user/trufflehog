[92mDate: 2016-11-22 11:29:27[0m
[92mBranch: master[0m
[92mCommit: saving token logic added, 'cancel' button added to request, logic of self-confirmation changed
[0m
@@ -1,3 +1,4 @@
 slack.client_id=106544810774.105805024723
 slack.client_secret=[93m667175b5aaac9ff5b4e4a08b3a1e0f01[0m
-slack.team_name=TestBot
\ No newline at end of file
+slack.team_name=TestBot
+slack.access_token=xoxp-106544810774-105163927360-107072394966-[93mce3336ef9877e588c05c9fba3c7dc423[0m

[92mDate: 2016-11-22 11:29:27[0m
[92mBranch: master[0m
[92mCommit: saving token logic added, 'cancel' button added to request, logic of self-confirmation changed
[0m
@@ -1 +0,0 @@
-xoxp-106544810774-105163927360-107072394966-[93mce3336ef9877e588c05c9fba3c7dc423[0m
\ No newline at end of file

[92mDate: 2016-11-21 15:04:21[0m
[92mBranch: master[0m
[92mCommit: refactoring
[0m
@@ -2,20 +2,18 @@ package com.botscrew.iaquest.api.Impl;
 
 import org.json.JSONObject;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Value;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.client.RestTemplate;
+
 import com.botscrew.iaquest.api.ApiContainer;
 import com.botscrew.iaquest.controllers.MainController;
 import com.botscrew.iaquest.model.Meeting;
 import com.botscrew.iaquest.model.MeetingConfirmation;
 import com.botscrew.iaquest.model.MeetingRequest;
 import com.botscrew.iaquest.model.Message;
-import java.time.LocalTime;
-import java.time.format.DateTimeFormatter;
 
 @RestController
 public class SlackApiContainer implements ApiContainer {
@@ -26,28 +24,22 @@ public class SlackApiContainer implements ApiContainer {
 	@Autowired
 	private RestTemplate restTemplate;
 
-	@Autowired
-	private DateTimeFormatter timeFormatter;
-
-	@Value("${slack.client_id}")
-	private String client_id;
-	@Value("${slack.client_secret}")
-	private String client_secret;
-	@Value("${slack.team_name}")
-	private String theOnlyTeamName;
-	@Value("${slack.access_token}")
-	private String accessToken;
+	private String client_id = "81167029479.81229271473";
+	private String client_secret = "[93m86744ff4fb6aa355ecd54d22cc1b0fa4[0m";
+	private String theOnlyTeamName = "Asmeralt's";
 
 	private SlackCredentials credentials;
 
 	@Override
 	@RequestMapping(value = "/", method = RequestMethod.GET)
 	public void receiveTeamInstallationToken(@RequestParam String code) {
+		if (credentials == null) {
 			SlackCredentials c = restTemplate.postForObject(
 					"https://slack.com/api/oauth.access?client_id=" + client_id + "&client_secret=" + client_secret + "&code=" + code, null, SlackCredentials.class);
-			if (c.getTeam_name().equals(theOnlyTeamName)) {
+			if (c.getTeam_id().equals(theOnlyTeamName)) {
 				credentials = c;
 			}
+		}
 	}
 
 	@Override
@@ -72,18 +64,8 @@ public class SlackApiContainer implements ApiContainer {
 
 	@Override
 	public void scheduleMeeting(Meeting meeting) {
-		try {
-			LocalTime time =  LocalTime.parse(meeting.getAction_value());
-			time = time.minusMinutes(5);
+		// TODO Auto-generated method stub
 
-		String s = String.format("https://slack.com/api/reminders.add?token=%s&text=%s&time=%s&user=",
-				accessToken, meeting.getTheme(), time.format(timeFormatter));
-		restTemplate.getForObject(s + meeting.getConfirmer_id(), String.class);
-		restTemplate.getForObject(s + meeting.getRequester_id(), String.class);
-		}
-		catch (NumberFormatException e) {
-			System.err.println("Illegal type of action_value");
-		}
 	}
 
 }

[92mDate: 2016-11-21 15:04:21[0m
[92mBranch: master[0m
[92mCommit: refactoring
[0m
@@ -1,4 +0,0 @@
-slack.client_id=106544810774.105805024723
-slack.client_secret=[93m667175b5aaac9ff5b4e4a08b3a1e0f01[0m
-slack.team_name=TestBot
-slack.access_token=xoxp-106544810774-105163927360-107072394966-[93mce3336ef9877e588c05c9fba3c7dc423[0m

[92mDate: 2016-11-21 11:42:10[0m
[92mBranch: master[0m
[92mCommit: Apic business logic
[0m
@@ -2,69 +2,47 @@ package com.botscrew.iaquest.api.Impl;
 
 import org.json.JSONObject;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RestController;
-import org.springframework.web.client.RestTemplate;
 
 import com.botscrew.iaquest.api.ApiContainer;
 import com.botscrew.iaquest.controllers.MainController;
-import com.botscrew.iaquest.model.Meeting;
 import com.botscrew.iaquest.model.MeetingConfirmation;
 import com.botscrew.iaquest.model.MeetingRequest;
 import com.botscrew.iaquest.model.Message;
+import com.ullink.slack.simpleslackapi.SlackSession;
 
-@RestController
+@Component
 public class SlackApiContainer implements ApiContainer {
 
-	@Autowired
-	private MainController controller;
+	private SlackSession session;
 
 	@Autowired
-	private RestTemplate restTemplate;
-
-	private String client_id = "81167029479.81229271473";
-	private String client_secret = "[93m86744ff4fb6aa355ecd54d22cc1b0fa4[0m";
-	private String theOnlyTeamName = "Asmeralt's";
-
-	private SlackCredentials credentials;
+	private MainController controller;
 
 	@Override
-	@RequestMapping(value = "/", method = RequestMethod.GET)
-	public void receiveTeamInstallationToken(@RequestParam String code) {
-		if (credentials == null) {
-			SlackCredentials c = restTemplate.postForObject(
-					"https://slack.com/api/oauth.access?client_id=" + client_id + "&client_secret=" + client_secret + "&code=" + code, null, SlackCredentials.class);
-			if (c.getTeam_id().equals(theOnlyTeamName)) {
-				credentials = c;
-			}
-		}
-	}
+	public void sendMessage(Message message) {
 
-	@Override
-	@RequestMapping(value = "/slashcommand", method = RequestMethod.POST)
-	public Message receiveCommand(MeetingRequest meetingRequest) {
-		if (meetingRequest.getCommand().equals("/iaquest")) {
-			return controller.requestMeeting(meetingRequest);
-		}
-		return new Message("Oops, unknown command");
 	}
 
 	@Override
-	@RequestMapping(value = "/buttonpostback", method = RequestMethod.POST)
-	public Message receivePostback(@RequestParam String payload) {
-		JSONObject postbackJson = new JSONObject(payload);
-		String channel_id = postbackJson.getJSONObject("channel").getString("id");
-		String user_id = postbackJson.getJSONObject("user").getString("id");
-		String callback_id = postbackJson.getString("callback_id");
-		String action_name = postbackJson.getJSONArray("actions").getJSONObject(0).getString("value");
-		return controller.confirmMeeting(new MeetingConfirmation(channel_id, user_id, callback_id, action_name));
+	@RequestMapping(value = "/", method = RequestMethod.POST)
+	public void receiveCommand(MeetingRequest meetingRequest) {
+		if (meetingRequest.getCommand().equals("iaquest")) {
+			controller.offerNewMeeting(meetingRequest);
+		}
 	}
 
 	@Override
-	public void scheduleMeeting(Meeting meeting) {
-		// TODO Auto-generated method stub
+	@RequestMapping(value = "/slack/confirmation", method = RequestMethod.POST)
+	public void receivePostback(JSONObject postbackJson) {
+		MeetingConfirmation meetingConfirmation = new MeetingConfirmation();
+
+		meetingConfirmation.setChannelId(postbackJson.getJSONObject("channel").getString("id"));
+		meetingConfirmation.setUserId(postbackJson.getJSONObject("user").getString("id"));
+		meetingConfirmation.setCallbackId(postbackJson.getString("callback_id"));
+		meetingConfirmation.setAction(postbackJson.getJSONArray("actions").getJSONObject(0).getString("name"));
 
 	}
 

